// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package store_test

import "database/sql"

type mockQuerier struct {
	QueryCalled chan bool
	QueryInput  struct {
		Query chan string
		Args  chan []interface{}
	}
	QueryOutput struct {
		Ret0 chan *sql.Rows
		Ret1 chan error
	}
	QueryRowCalled chan bool
	QueryRowInput  struct {
		Query chan string
		Args  chan []interface{}
	}
	QueryRowOutput struct {
		Ret0 chan *sql.Row
	}
	BeginCalled chan bool
	BeginOutput struct {
		Ret0 chan *sql.Tx
		Ret1 chan error
	}
	CloseCalled chan bool
	CloseOutput struct {
		Ret0 chan error
	}
}

func newMockQuerier() *mockQuerier {
	m := &mockQuerier{}
	m.QueryCalled = make(chan bool, 100)
	m.QueryInput.Query = make(chan string, 100)
	m.QueryInput.Args = make(chan []interface{}, 100)
	m.QueryOutput.Ret0 = make(chan *sql.Rows, 100)
	m.QueryOutput.Ret1 = make(chan error, 100)
	m.QueryRowCalled = make(chan bool, 100)
	m.QueryRowInput.Query = make(chan string, 100)
	m.QueryRowInput.Args = make(chan []interface{}, 100)
	m.QueryRowOutput.Ret0 = make(chan *sql.Row, 100)
	m.BeginCalled = make(chan bool, 100)
	m.BeginOutput.Ret0 = make(chan *sql.Tx, 100)
	m.BeginOutput.Ret1 = make(chan error, 100)
	m.CloseCalled = make(chan bool, 100)
	m.CloseOutput.Ret0 = make(chan error, 100)
	return m
}
func (m *mockQuerier) Query(query string, args ...interface{}) (*sql.Rows, error) {
	m.QueryCalled <- true
	m.QueryInput.Query <- query
	m.QueryInput.Args <- args
	return <-m.QueryOutput.Ret0, <-m.QueryOutput.Ret1
}
func (m *mockQuerier) QueryRow(query string, args ...interface{}) *sql.Row {
	m.QueryRowCalled <- true
	m.QueryRowInput.Query <- query
	m.QueryRowInput.Args <- args
	return <-m.QueryRowOutput.Ret0
}
func (m *mockQuerier) Begin() (*sql.Tx, error) {
	m.BeginCalled <- true
	return <-m.BeginOutput.Ret0, <-m.BeginOutput.Ret1
}
func (m *mockQuerier) Close() error {
	m.CloseCalled <- true
	return <-m.CloseOutput.Ret0
}
